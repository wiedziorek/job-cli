#!/usr/bin/python
##########################################################################
#
#  Copyright (c) 2017, Human Ark Animation Studio. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
#     * Neither the name of Human Ark Animation Studio nor the names of any
#       other contributors to this software may be used to endorse or
#       promote products derived from this software without specific prior
#       written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
#  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
##########################################################################
"""Job - vol 2.1.0

Usage:
  job
  job create PROJECT [TYPE ASSET] [--log-level=INFO --root=prefix --no-local-schema --fromdb --sanitize]
  job set [PROJECT TYPE ASSET] [--rez=<rez-packages>...] [--log-level=INFO --root=prefix] [--refresh]
  job archive PROJECT 
  job read  PROJECT [TYPE ASSET] [FIELDS...] [--log-level=INFO]
  job write PROJECT [TYPE ASSET] [FIELDS...] [--log-level=INFO]
  job (-h | --help)
  job --version


Options:
                        No options -> "job set sandbox user $USER"
  -h --help             Show this screen.
  --version             Show version.
  --log-level=<level>   Log level of subcommands (INFO | DEBUG) [default: INFO]
  --no-local-schema     Disable savig/loading local copy of schema on 'create' 
  --refresh             Ignore existing job context, and recreate it from scratch.
  --sanitize            Convert external names (from Shotgun i.e.)
  --root=<prefix>       Overrides root directory (for debuging) 
"""

import sys
from os.path import realpath, dirname, join, exists

# Get root directory
job_root_path = dirname(realpath(__file__))
job_root_path = dirname(job_root_path)
local_docopt_path     = join(job_root_path, "docopt")
local_schematics_path = join(job_root_path, "schematics")
sys.path = [job_root_path] + sys.path
sys.path += [local_docopt_path, local_schematics_path]


# Make sure we can import main module
try:
    import job
    from docopt import docopt
except ImportError, error:
    print error
    raise


def get_sub_command(options):
    """ Gets a command.module.Class which coresponds to docopt
        subcommand (first argument).

        Params:
            options - dictionary of command line options
                      as returned by docopt.
        Returns:
            Class object from command.module (not initilized).
    
        CLI setup based on https://stormpath.com/blog/\
        building-simple-cli-interfaces-in-python
    """
    import commands
    from commands.base import BaseSubCommand
    from inspect import getmembers, isclass
    subcommand = None  
    for k, v in options.iteritems():
        if not hasattr(commands, k) or not v:
          continue
        module = getattr(commands, k) 
        candidates = [cls[1] for cls in getmembers(module, isclass)]
        # We are only interested in classes derived from Base:
        subcommand = [cls for cls in candidates if issubclass(cls, BaseSubCommand) \
                      and cls != BaseSubCommand][0]
        return subcommand
    return
    
def main():
    """ Minimal entry point for job-cli environment. This calls sub command from
        job-cli/commands directory from where work starts happening.
    """

    from job.logger import LoggerFactory
    cli_options = docopt(__doc__, version='job version 2.1.0')

    logger = LoggerFactory().get_logger("Job (main entry)", \
        level=cli_options['--log-level'])

    command = get_sub_command(cli_options)
    logger.debug("Command found %s", command)

    if not command:
        # This is temporary
        print __doc__
        return

    command = command(cli_options)
    command.run()


if __name__ == "__main__": main()
